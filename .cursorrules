# Cursor Rules for React + TypeScript Project

## Project Overview
This is a modern React application built with Vite, TypeScript, and follows current best practices for scalability, maintainability, and performance.

## Core Principles
- **Scalability**: Write code that can grow with the project
- **Clarity**: Code should be self-documenting and easy to understand
- **Simplicity**: Favor simple, readable solutions over complex ones
- **Modularity**: Create reusable components and utilities
- **Type Safety**: Leverage TypeScript for better development experience

## File Structure & Organization

### Recommended Directory Structure
```
src/
├── components/          # Reusable UI components
│   ├── ui/             # Basic UI components (Button, Input, etc.)
│   ├── layout/         # Layout components (Header, Sidebar, etc.)
│   └── forms/          # Form-specific components
├── pages/              # Page components (route components)
├── hooks/              # Custom React hooks
├── services/           # API calls and external services
├── utils/              # Utility functions and helpers
├── types/              # TypeScript type definitions
├── constants/          # Application constants
├── contexts/           # React Context providers
├── store/              # State management (if using Redux, Zustand, etc.)
├── styles/             # Global styles and themes
├── assets/             # Images, icons, fonts
└── __tests__/          # Test files
```

### File Naming Conventions
- **Components**: PascalCase (e.g., `UserProfile.tsx`)
- **Hooks**: camelCase starting with "use" (e.g., `useLocalStorage.ts`)
- **Utilities**: camelCase (e.g., `formatDate.ts`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `API_ENDPOINTS.ts`)
- **Types**: PascalCase (e.g., `UserTypes.ts`)

### Component Organization
- Each component should have its own directory if it includes multiple files
- Use index.ts files for clean imports
- Keep component files under 200 lines when possible

Example component structure:
```
components/
├── UserProfile/
│   ├── index.ts
│   ├── UserProfile.tsx
│   ├── UserProfile.test.tsx
│   ├── UserProfile.styles.ts
│   └── UserProfile.types.ts
```

## React Best Practices

### Component Guidelines
- Use functional components with hooks
- Prefer composition over inheritance
- Keep components focused on a single responsibility
- Use React.memo() for performance optimization when needed
- Implement proper error boundaries

### State Management
- Use useState for local component state
- Use useContext for shared state between components
- Consider external state management (Redux, Zustand) for complex applications
- Keep state as close to where it's used as possible

### Props and TypeScript
- Always define interfaces for component props
- Use generic types when appropriate
- Prefer specific types over `any`
- Use optional props with default values when applicable

Example:
```typescript
interface UserProfileProps {
  user: User;
  onEdit?: (user: User) => void;
  isEditable?: boolean;
}

const UserProfile: React.FC<UserProfileProps> = ({
  user,
  onEdit,
  isEditable = false
}) => {
  // Component implementation
};
```

## TypeScript Guidelines

### Type Definitions
- Create interfaces for all data structures
- Use type aliases for union types and complex types
- Prefer interfaces over types for object shapes
- Use enums for constants with multiple values

### Import/Export Patterns
- Use named exports for utilities and hooks
- Use default exports for components
- Group imports: external libraries, internal modules, relative imports
- Use path aliases for cleaner imports

Example:
```typescript
// External libraries
import React, { useState, useEffect } from 'react';
import { toast } from 'react-hot-toast';

// Internal modules
import { userService } from '@/services/userService';
import { User } from '@/types/User';

// Relative imports
import './UserProfile.styles.css';
```

## Code Quality Standards

### Documentation
- Use JSDoc comments for all functions and complex logic
- Include parameter descriptions and return types
- Add examples for complex utilities

Example:
```typescript
/**
 * Formats a date string for display in the UI
 * @param date - The date to format
 * @param options - Formatting options
 * @returns Formatted date string
 * @example
 * formatDate('2023-12-25', { format: 'long' }) // "December 25, 2023"
 */
const formatDate = (date: string, options?: FormatOptions): string => {
  // Implementation
};
```

### Error Handling
- Use try-catch blocks for async operations
- Implement proper error boundaries
- Provide meaningful error messages
- Log errors for debugging: `console.error('Error details:', error)`

### Performance Optimization
- Use React.memo for expensive components
- Implement lazy loading for routes: `const Home = lazy(() => import('./Home'))`
- Use useCallback and useMemo appropriately
- Optimize bundle size with code splitting

## Debugging Guidelines
- Use `console.log` statements for debugging during development
- Include descriptive messages: `console.log('User data fetched:', userData)`
- Remove console statements before production builds
- Use React DevTools for component debugging

## Testing Approach
- Write unit tests for utilities and hooks
- Use integration tests for components
- Follow the testing-library principles
- Maintain good test coverage for critical paths

## Accessibility Standards
- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation works
- Test with screen readers
- Maintain proper color contrast

## Performance Guidelines
- Implement lazy loading for components and images
- Use React.memo() judiciously
- Optimize re-renders with useCallback and useMemo
- Bundle optimization with Vite's built-in features

## API Integration
- Create service layers for API calls
- Use proper error handling for network requests
- Implement loading states and error states
- Use TypeScript interfaces for API responses

## Styling Guidelines
- Use CSS modules or styled-components for component-scoped styles
- Implement a consistent design system
- Use CSS custom properties for theming
- Follow responsive design principles

## Security Considerations
- Sanitize user inputs
- Use HTTPS for all API calls
- Implement proper authentication flows
- Validate data on both client and server sides

## Code Review Checklist
- [ ] Components are properly typed
- [ ] Functions have JSDoc comments
- [ ] No console.log statements in production code
- [ ] Proper error handling implemented
- [ ] Accessibility considerations addressed
- [ ] Performance optimizations applied where needed
- [ ] Code follows established patterns
- [ ] Tests are written and passing

## Common Patterns to Follow

### Custom Hooks
```typescript
/**
 * Custom hook for managing local storage
 * @param key - Storage key
 * @param initialValue - Initial value if key doesn't exist
 * @returns Tuple of [value, setValue]
 */
const useLocalStorage = <T>(key: string, initialValue: T) => {
  // Implementation
};
```

### API Service Pattern
```typescript
interface ApiResponse<T> {
  data: T;
  message: string;
  success: boolean;
}

export const userService = {
  /**
   * Fetches user data from the API
   * @param userId - The user ID to fetch
   * @returns Promise resolving to user data
   */
  async getUser(userId: string): Promise<ApiResponse<User>> {
    // Implementation
  }
};
```

### Component with Error Handling
```typescript
const UserProfile: React.FC<UserProfileProps> = ({ userId }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        console.log('Fetching user data for:', userId);
        const response = await userService.getUser(userId);
        setUser(response.data);
        console.log('User data loaded successfully:', response.data);
      } catch (err) {
        console.error('Error fetching user:', err);
        setError('Failed to load user data');
      } finally {
        setLoading(false);
      }
    };

    fetchUser();
  }, [userId]);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  if (!user) return <div>User not found</div>;

  return (
    <div>
      {/* Component JSX */}
    </div>
  );
};
```

Remember: Always prioritize code readability, maintainability, and user experience. When in doubt, choose the simpler, more explicit approach. 